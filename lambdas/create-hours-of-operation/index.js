// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0

/**
 * Lambda function to create hours of operation in Amazon Connect
 * Creates and configures hours of operation settings for a Connect instance
 */

const { ConnectClient, CreateHoursOfOperationCommand } = require('@aws-sdk/client-connect');
const connect = new ConnectClient();

/**
 * Helper function to split a string from the right side
 * @param {string} sep - Separator to split on
 * @param {number} maxsplit - Maximum number of splits
 * @returns {Array} Array of split string parts
 */
String.prototype.rsplit = function(sep, maxsplit) {
    const split = this.split(sep);
    return maxsplit ? [split.slice(0, -maxsplit).join(sep)].concat(split.slice(-maxsplit)) : split;
};

/**
 * Lambda handler to process hours of operation creation
 * @param {Object} event - Event containing experience and resource configuration
 * @returns {Object} Modified event object with created HOP details
 */
exports.handler = async (event) => {
    // Extract instance ID and find HOP resource
    const instanceId = event.experience.instance.rsplit("/", 1)[1];
    const hopResource = event.resources.find(o => o.type === "hop");

    console.log("Starting with resource:", hopResource);

    // Default hours of operation configuration
    let hoursOfOperation = [
        {
            "Day": "FRIDAY",
            "StartTime": {
                "Hours": 0,
                "Minutes": 0
            },
            "EndTime": {
                "Hours": 0,
                "Minutes": 0
            }
        },
        {
            "Day": "SUNDAY",
            "StartTime": {
                "Hours": 0,
                "Minutes": 0
            },
            "EndTime": {
                "Hours": 0,
                "Minutes": 0
            }
        },
        {
            "Day": "SATURDAY",
            "StartTime": {
                "Hours": 0,
                "Minutes": 0
            },
            "EndTime": {
                "Hours": 0,
                "Minutes": 0
            }
        },
        {
            "Day": "WEDNESDAY",
            "StartTime": {
                "Hours": 0,
                "Minutes": 0
            },
            "EndTime": {
                "Hours": 0,
                "Minutes": 0
            }
        },
        {
            "Day": "THURSDAY",
            "StartTime": {
                "Hours": 0,
                "Minutes": 0
            },
            "EndTime": {
                "Hours": 0,
                "Minutes": 0
            }
        },
        {
            "Day": "TUESDAY",
            "StartTime": {
                "Hours": 0,
                "Minutes": 0
            },
            "EndTime": {
                "Hours": 0,
                "Minutes": 0
            }
        },
        {
            "Day": "MONDAY",
            "StartTime": {
                "Hours": 0,
                "Minutes": 0
            },
            "EndTime": {
                "Hours": 0,
                "Minutes": 0
            }
        }
    ];

    // If hours checking is enabled, process the configured hours
    if (event.experience.checkHours) {
        hoursOfOperation = [];

        Object.keys(event.experience.hoursOfOperation).forEach(hop => {
            if (Object.keys(event.experience.hoursOfOperation[hop]).length !== 0) {
                hoursOfOperation.push({
                    "Day": hop.toUpperCase(),
                    "StartTime": {
                        "Hours": parseInt(event.experience.hoursOfOperation[hop]['fromHours']),
                        "Minutes": parseInt(event.experience.hoursOfOperation[hop]['fromMinutes'])
                    },
                    "EndTime": {
                        "Hours": parseInt(event.experience.hoursOfOperation[hop]['toHours']),
                        "Minutes": parseInt(event.experience.hoursOfOperation[hop]['toMinutes'])
                    },
                });
            }
        });
    }

    // Prepare parameters for creating hours of operation
    const hoursParams = {
        Name: hopResource.name,
        Description: "Generated by SMB tool",
        TimeZone: event.experience.checkHours ? event.experience.timezone : "UTC",
        Config: hoursOfOperation,
        InstanceId: instanceId
    };
    
    console.log("Creating HOP with params:", JSON.stringify(hoursParams));
    
    try {
        await createHopAsync(hoursParams, 1000);
    } catch (error) {
        console.error("Error creating hours of operation:", error);
        hopResource.message = error.code || "Error creating hours of operation";
    }

    return event;
};

/**
 * Creates hours of operation with retry mechanism
 * @param {Object} params - Hours of operation parameters
 * @param {number} timeout - Delay before creation in milliseconds
 * @returns {Promise} Promise that resolves when HOP is created
 */
async function createHopAsync(params, timeout) {
    return new Promise((resolve, reject) => {
        setTimeout(async () => {
            try {
                const command = new CreateHoursOfOperationCommand(params);
                const data = await connect.send(command);
                console.log("HOP creation successful:", data);
                
                if (data.HoursOfOperationArn) {
                    hopResource.arn = data.HoursOfOperationArn;
                    resolve(data);
                } else {
                    reject(new Error("No HoursOfOperationArn returned"));
                }
            } catch (error) {
                console.error("Error in createHopAsync:", error);
                reject(error);
            }
        }, timeout);
    });
}
